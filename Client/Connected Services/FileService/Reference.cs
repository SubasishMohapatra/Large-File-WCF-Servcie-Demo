//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.FileService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileService.IFileService")]
    public interface IFileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Upload", ReplyAction="http://tempuri.org/IFileService/UploadResponse")]
        Client.FileService.UploadResponse Upload(Client.FileService.UploadRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileService/Upload", ReplyAction="http://tempuri.org/IFileService/UploadResponse")]
        System.Threading.Tasks.Task<Client.FileService.UploadResponse> UploadAsync(Client.FileService.UploadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream Stream;
        
        public UploadRequest() {
        }
        
        public UploadRequest(string FileName, System.IO.Stream Stream) {
            this.FileName = FileName;
            this.Stream = Stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UploadSucceeded;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long FileSize;
        
        public UploadResponse() {
        }
        
        public UploadResponse(bool UploadSucceeded, long FileSize) {
            this.UploadSucceeded = UploadSucceeded;
            this.FileSize = FileSize;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileServiceChannel : Client.FileService.IFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileServiceClient : System.ServiceModel.ClientBase<Client.FileService.IFileService>, Client.FileService.IFileService {
        
        public FileServiceClient() {
        }
        
        public FileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.FileService.UploadResponse Client.FileService.IFileService.Upload(Client.FileService.UploadRequest request) {
            return base.Channel.Upload(request);
        }
        
        public bool Upload(string FileName, System.IO.Stream Stream, out long FileSize) {
            Client.FileService.UploadRequest inValue = new Client.FileService.UploadRequest();
            inValue.FileName = FileName;
            inValue.Stream = Stream;
            Client.FileService.UploadResponse retVal = ((Client.FileService.IFileService)(this)).Upload(inValue);
            FileSize = retVal.FileSize;
            return retVal.UploadSucceeded;
        }
        
        public System.Threading.Tasks.Task<Client.FileService.UploadResponse> UploadAsync(Client.FileService.UploadRequest request) {
            return base.Channel.UploadAsync(request);
        }
    }
}
